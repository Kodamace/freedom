{"version":3,"sources":["logo193.png","Clock.js","Name.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Clock","props","state","days","hours","minutes","seconds","this","getTimeUntil","deadline","setInterval","num","time","Date","parse","Math","floor","setState","className","leading0","Component","Name","newDeadline","src","Logo","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,qC,2LCiD5BC,G,uDA7CX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,KAAM,EACNC,MAAO,EACPC,QAAS,EACTC,QAAS,GANE,E,iEAWfC,KAAKC,aAAaD,KAAKN,MAAMQ,Y,0CAGZ,IAAD,OAChBC,aAAY,kBAAM,EAAKF,aAAa,EAAKP,MAAMQ,YAAW,O,+BAGrDE,GACL,OAAOA,EAAM,GAAK,IAAMA,EAAMA,I,mCAGrBF,GACT,IAAMG,EAAOC,KAAKC,MAAML,GAAYI,KAAKC,MAAM,IAAID,MAC7CP,EAAUS,KAAKC,MAAOJ,EAAK,IAAQ,IACnCP,EAAUU,KAAKC,MAAOJ,EAAK,IAAK,GAAM,IACtCR,EAAQW,KAAKC,MAAMJ,EAAK,KAAe,IACvCT,EAAOY,KAAKC,MAAMJ,EAAK,OAE7BL,KAAKU,SAAS,CAACd,OAAMC,QAAOC,UAASC,c,+BAIrC,OACA,6BACI,yBAAKY,UAAU,aAAaX,KAAKY,SAASZ,KAAKL,MAAMC,MAArD,SACA,yBAAKe,UAAU,cAAcX,KAAKY,SAASZ,KAAKL,MAAME,OAAtD,UACA,yBAAKc,UAAU,gBAAgBX,KAAKY,SAASZ,KAAKL,MAAMG,SAAxD,YACA,yBAAKa,UAAU,gBAAgBX,KAAKY,SAASZ,KAAKL,MAAMI,SAAxD,iB,GAvCQc,c,gBC6CLC,E,kDA1CX,WAAYpB,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTO,SAAU,gBACVa,YAAa,IAJF,E,6DASff,KAAKU,SAAS,CAACR,SAAUF,KAAKL,MAAMoB,gB,+BAIpC,OACI,yBAAKJ,UAAU,QACX,yBAAKA,UAAU,QACX,yBAAKK,IAAKC,IAAMC,IAAI,UAExB,yBAAKP,UAAU,mBAAf,uFAGJ,yBAAKA,UAAU,YAAf,cAAsCX,KAAKL,MAAMO,UAEjD,kBAAC,EAAD,CACAA,SAAUF,KAAKL,MAAMO,gB,GAzBdW,aCWJM,MAVf,WACE,OACE,yBAAKR,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCEYS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f9f635de.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo193.ba2a6ae7.png\";","import React, { Component } from \"react\";\r\nimport \"./Name.css\";\r\n\r\nclass Clock extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            days: 0,\r\n            hours: 0,\r\n            minutes: 0,\r\n            seconds: 0\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.getTimeUntil(this.props.deadline);\r\n    }\r\n\r\n    componentDidMount() {\r\n        setInterval(() => this.getTimeUntil(this.props.deadline), 1000);\r\n    }\r\n\r\n    leading0(num) {\r\n        return num < 10 ? \" \" + num : num;\r\n    }\r\n\r\n    getTimeUntil(deadline) {\r\n        const time = Date.parse(deadline) - Date.parse(new Date());\r\n        const seconds = Math.floor((time/1000) % 60);\r\n        const minutes = Math.floor((time/1000/60) % 60);\r\n        const hours = Math.floor(time/(1000*60*60) % 24);\r\n        const days = Math.floor(time/(1000*60*60*24));\r\n        \r\n        this.setState({days, hours, minutes, seconds})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div>\r\n            <div className=\"clockDays\">{this.leading0(this.state.days)} Days</div>\r\n            <div className=\"clockHours\">{this.leading0(this.state.hours)} Hours</div>\r\n            <div className=\"clockMinutes\">{this.leading0(this.state.minutes)} Minutes</div>\r\n            <div className=\"clockSeconds\">{this.leading0(this.state.seconds)} Seconds</div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Clock;","import React, { Component  } from \"react\";\r\nimport \"./Name.css\";\r\nimport Clock from \"./Clock\";\r\nimport Logo from \"./logo193.png\";\r\n\r\nclass Name extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            deadline: \"April 16 2020\",\r\n            newDeadline: \"\"\r\n        }\r\n    }\r\n\r\n    changeDeadline() {\r\n        this.setState({deadline: this.state.newDeadline})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"name\">\r\n                <div className=\"logo\">\r\n                    <img src={Logo} alt=\"logo\"/>\r\n                </div>\r\n                <div className=\"braveHeartQuote\">\r\n                    They may take away our lives, but they'll never take our freedom! (William Wallace)\r\n                </div>\r\n            <div className=\"appTitle\">Freeeeedom {this.state.deadline} \r\n            </div>\r\n            <Clock \r\n            deadline={this.state.deadline} \r\n            />\r\n            {/* <div>\r\n            <input \r\n            placeholder=\"new date\"\r\n            onChange={event => this.setState({newDeadline: event.target.value}) }\r\n            />\r\n            <button onClick={() => this.changeDeadline()}>\r\n                Submit\r\n                </button>\r\n            </div> */}\r\n            </div>\r\n            \r\n        )\r\n        \r\n    }\r\n}\r\n\r\nexport default Name;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Name from \"./Name\"\n// import Clock from \"./clock\";\n\nfunction App () {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Name/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}